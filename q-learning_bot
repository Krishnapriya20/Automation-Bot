import numpy as np
import random

# Simple Q-learning bot to learn UI tap actions
class QLearningBot:
    def __init__(self, actions, learning_rate=0.1, discount_factor=0.95, exploration_rate=0.2):
        self.q_table = {}
        self.actions = actions
        self.alpha = learning_rate
        self.gamma = discount_factor
        self.epsilon = exploration_rate

    def choose_action(self, state):
        if random.uniform(0, 1) < self.epsilon or state not in self.q_table:
            return random.choice(self.actions)
        return max(self.q_table[state], key=self.q_table[state].get)

    def learn(self, state, action, reward, next_state):
        self.q_table.setdefault(state, {a: 0 for a in self.actions})
        self.q_table.setdefault(next_state, {a: 0 for a in self.actions})
        old_value = self.q_table[state][action]
        future_optimal = max(self.q_table[next_state].values())
        self.q_table[state][action] = old_value + self.alpha * (reward + self.gamma * future_optimal - old_value)

# Example usage
if __name__ == "__main__":
    bot = QLearningBot(actions=["tap_home", "tap_retry", "tap_exit"])
    bot.learn("home_screen", "tap_home", 1, "main_menu")
    print("Q-table:", bot.q_table)
